{"version":3,"sources":["App.js","serviceWorker.js","index.js","logo.svg"],"names":["tipserConfig","posId","lang","env","primaryColor","App","react_default","a","createElement","dist","context","className","src","logo","alt","href","target","rel","id","productId","collectionId","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"oRAMIA,SAAe,CACfC,MAAO,2BACPC,KAAM,KACNC,IAAK,OACLC,aAAc,QAkEHC,mLA5DX,OACEC,EAAAC,EAAAC,cAACC,EAAA,uBAAD,CAAwBC,QAASV,GAC7BM,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UAAQG,UAAU,UACdL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,cACXL,EAAAC,EAAAC,cAAA,MAAIG,UAAU,mBACVL,EAAAC,EAAAC,cAAA,MAAIG,UAAU,mBACVL,EAAAC,EAAAC,cAAA,OAAKI,IAAKC,IAAMF,UAAU,UAAUG,IAAI,UAE5CR,EAAAC,EAAAC,cAAA,MAAIG,UAAU,mBACVL,EAAAC,EAAAC,cAAA,KACIG,UAAU,OACVI,KAAK,gCACLC,OAAO,SACPC,IAAI,uBAJR,sBASJX,EAAAC,EAAAC,cAAA,MAAIG,UAAU,mBACVL,EAAAC,EAAAC,cAAA,KACIG,UAAU,OACVI,KAAK,iDACLC,OAAO,SACPC,IAAI,uBAJR,kCASJX,EAAAC,EAAAC,cAAA,MAAIG,UAAU,2BAEVL,EAAAC,EAAAC,cAACC,EAAA,SAAD,UAKhBH,EAAAC,EAAAC,cAAA,YAEIF,EAAAC,EAAAC,cAACC,EAAA,cAAD,CAAgBS,GAAG,0BAGnBZ,EAAAC,EAAAC,cAACC,EAAA,cAAD,CAAeU,UAAU,6BAGzBb,EAAAC,EAAAC,cAACC,EAAA,cAAD,CAAgBS,GAAG,2BAEnBZ,EAAAC,EAAAC,cAACC,EAAA,oBAAD,CAAqBW,aAAa,6BAElCd,EAAAC,EAAAC,cAACC,EAAA,oBAAD,CAAqBW,aAAa,8BAGtCd,EAAAC,EAAAC,cAAA,cACIF,EAAAC,EAAAC,cAAA,QAAMG,UAAU,eAAhB,gCAtDAU,aCFEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtB,EAAAC,EAAAC,cAACqB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,kCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.e58a1f41.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { TipserElement, TipserProduct, CartIcon, TipserElementsProvider, CollectionComponent } from '@tipser/tipser-elements';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\n\r\nlet tipserConfig = {\r\n    posId: '59e86b79b8f3f60a94ecd26a',\r\n    lang: 'en',\r\n    env: 'prod',\r\n    primaryColor: 'red'\r\n};\r\n\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <TipserElementsProvider context={tipserConfig}>\r\n          <div>\r\n              <header className=\"header\">\r\n                  <nav className=\"navigation\">\r\n                      <ul className=\"horizontal-menu\">\r\n                          <li className=\"horizontal-item\">\r\n                              <img src={logo} className=\"te-logo\" alt=\"logo\" />\r\n                          </li>\r\n                          <li className=\"horizontal-item\">\r\n                              <a\r\n                                  className=\"link\"\r\n                                  href=\"https://developers.tipser.com\"\r\n                                  target=\"_blank\"\r\n                                  rel=\"noopener noreferrer\"\r\n                              >\r\n                                  Tipser Developers\r\n                              </a>\r\n                          </li>\r\n                          <li className=\"horizontal-item\">\r\n                              <a\r\n                                  className=\"link\"\r\n                                  href=\"https://tipser.github.io/docs/#tipser-elements\"\r\n                                  target=\"_blank\"\r\n                                  rel=\"noopener noreferrer\"\r\n                              >\r\n                                  Tipser Elements documentation\r\n                              </a>\r\n                          </li>\r\n                          <li className=\"horizontal-item te-cart\">\r\n                              {/* Inserting the Tipser cart Icon */}\r\n                              <CartIcon/>\r\n                          </li>\r\n                      </ul>\r\n                  </nav>\r\n              </header>\r\n              <main>\r\n                  {/* Inserting an elment from Contentful taking the content Id as the prop. This example renders a page, consisting of other components */}\r\n                  <TipserElement  id=\"2OeW1Ab8lKNcUq6dVUh79\" />\r\n\r\n                  {/* Inserting a product using the productId as prop  */}\r\n                  <TipserProduct productId=\"5ba2334a781baa0001ccdffc\"/>\r\n\r\n                  {/* Inserting an elment from Contentful taking the content Id as the prop. This example renders a page, consisting of other components */}\r\n                  <TipserElement  id=\"1larHZb8TeMQiqmi4W8CIS\" />\r\n\r\n                  <CollectionComponent collectionId=\"5beaaa0653e83f0001e18577\" />\r\n\r\n                  <CollectionComponent collectionId=\"5bec3f0e8d1736000154335a\" />\r\n              </main>\r\n              {/* Inserting a custom footer */}\r\n              <footer>\r\n                  <span className=\"footer-text\">This is the footer</span>\r\n              </footer>\r\n          </div>\r\n      </TipserElementsProvider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();","module.exports = __webpack_public_path__ + \"static/media/logo.03714909.svg\";"],"sourceRoot":""}